name: Publish Website to CPanel
on:
  push:
    branches:
      - main

jobs:
  FTP-Deploy-Action:
    name: FTP-Deploy-Action
    runs-on: ubuntu-latest

    steps:
      # Paso 1: Clonar el repositorio
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 2

      # Paso 2: Instalar dependencias de Node.js y compilar activos
      - name: Build assets
        run: npm install && npm run build

      # Paso 3: Instalar PHP y Composer
      - name: Install PHP and Composer
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2' # Ajusta a la versión de PHP usada en tu proyecto Laravel
          tools: 'composer'

      # Paso 4: Instalar dependencias PHP
      - name: Install PHP dependencies
        run: composer install --optimize-autoloader

      # Paso 5: Desplegar archivos por FTP
      - name: FTP-Deploy-Action
        uses: SamKirkland/FTP-Deploy-Action@4.3.3
        with:
          server: ${{ secrets.FTP_SERVER }}
          username: ${{ secrets.FTP_USERNAME }}
          password: ${{ secrets.FTP_PASSWORD }}
          server-dir: ./


      # Paso 6: Configurar el archivo .env desde los secretos
      - name: Setup environment file
        run: |
          echo "Setting up .env from secrets..."
          echo "${{ secrets.ENV_CONTENT }}" > .env
          cat .env

      # Paso 7: Habilitar depuración de Laravel
      - name: Enable Laravel debug
        run: |
          echo "APP_DEBUG=true" >> .env
          sed -i 's/APP_DEBUG=.*/APP_DEBUG=true/' .env

      # Paso 8: Configurar permisos de directorios
      - name: Set directory permissions
        run: chmod -R 775 storage bootstrap/cache





# name: Publish Website to CPanel
# on:
#   push:
#     branches:
#       - main

# jobs:
#   FTP-Deploy-Action:
#     name: FTP-Deploy-Action
#     runs-on: ubuntu-latest

#     steps:
#       # Paso 1: Clonar el repositorio
#       - name: Checkout repository
#         uses: actions/checkout@v3
#         with:
#           fetch-depth: 2

#       # Paso 2: Instalar dependencias de Node.js  y compilar activos
#       - name: Build assets
#         run: npm install && npm run build

#       # Paso 3: Instalar PHP y Composer
#       - name: Install PHP and Composer
#         uses: shivammathur/setup-php@v2
#         with:
#           php-version: '8.2' # Ajusta a la versión de PHP usada en tu proyecto Laravel
#           tools: 'composer'

#       # Paso 4: Instalar dependencias PHP
#       - name: Install PHP dependencies
#         run: composer install --optimize-autoloader

#       # Paso 5: Desplegar archivos por FTP
#       - name: FTP-Deploy-Action
#         uses: SamKirkland/FTP-Deploy-Action@4.3.3
#         with:
#           server: ${{ secrets.FTP_SERVER }}
#           username: ${{ secrets.FTP_USERNAME }}
#           password: ${{ secrets.FTP_PASSWORD }}

#       # Paso 6: Configurar el archivo .env desde los secretos
#       - name: Setup environment file
#         run: |
#           echo "Setting up .env from secrets..."
#           echo "${{ secrets.ENV_CONTENT }}" > .env
#           cat .env

#       # Paso 7: Habilitar depuración de Laravel
#       - name: Enable Laravel debug
#         run: |
#           echo "APP_DEBUG=true" >> .env
#           sed -i 's/APP_DEBUG=.*/APP_DEBUG=true/' .env

#       # Paso 8: Configurar permisos de directorios
#       - name: Set directory permissions
#         run: chmod -R 775 storage bootstrap/cache

#       - name: Debug MySQL Connection
#         run: |
#           echo "Testing MySQL connection..."
#           mysql --host=${{ secrets.DB_HOST }} --port=3306 --user=${{ secrets.DB_USERNAME }} --password=${{ secrets.DB_PASSWORD }} -e "SHOW DATABASES;"

#       # Paso 9: Esperar a que MySQL esté disponible
#       - name: Wait for MySQL to be ready
#         run: |
#           echo "Waiting for MySQL to be ready..."
#           timeout 120s bash -c 'until mysqladmin ping --host=${{ secrets.DB_HOST }} --port=3306 --user=${{ secrets.DB_USERNAME }} --password=${{ secrets.DB_PASSWORD }} --silent; do
#             echo "MySQL is not ready, waiting..."
#             sleep 5
#           done' || echo "Timeout reached, MySQL is still not ready"


#       # Paso 10: Ejecutar migraciones y semillas en la base de datos
#       - name: Run migrations and seed the database
#         run: |
#           php artisan migrate --force
#           php artisan db:seed --force
#         env:
#           DB_CONNECTION: mysql
#           DB_DATABASE: ${{ secrets.DB_DATABASE }}
#           DB_PORT: 3306
#           DB_HOST: ${{ secrets.DB_HOST }}
#           DB_USERNAME: ${{ secrets.DB_USERNAME }}
#           DB_PASSWORD: ${{ secrets.DB_PASSWORD }}

#       # Paso 11: Ejecutar pruebas de PHPUnit
#       - name: Run PHPUnit tests
#         run: vendor/bin/phpunit --testdox
#         env:
#           DB_CONNECTION: mysql
#           DB_DATABASE: ${{ secrets.DB_DATABASE }}
#           DB_PORT: 3306
#           DB_HOST: ${{ secrets.DB_HOST }}
#           DB_USERNAME: ${{ secrets.DB_USERNAME }}
#           DB_PASSWORD: ${{ secrets.DB_PASSWORD }}




# name: Publish Website to CPanel
# on:
#   push:
#     branches:
#       - main

# jobs:
#   FTP-Deploy-Action:
#     name: FTP-Deploy-Action
#     runs-on: ubuntu-latest

#     services:
#       mysql:
#         # Usamos Docker para levantar un contenedor MySQL
#         image: mysql:latest
#         env:
#           MYSQL_ROOT_PASSWORD: ${{ secrets.DB_PASSWORD }}
#           MYSQL_DATABASE: ${{ secrets.DB_DATABASE }}
#         ports:
#           - 3306:3306
#         options: >-
#           --health-cmd="mysqladmin ping"
#           --health-interval=10s
#           --health-timeout=5s
#           --health-retries=3

#     steps:
#       # Paso 1: Clonar el repositorio
#       - name: Checkout repository
#         uses: actions/checkout@v3
#         with:
#           fetch-depth: 2

#       # Paso 2: Instalar dependencias de Node.js y compilar activos
#       - name: Build assets
#         run: npm install && npm run build

#       # Paso 3: Instalar PHP y Composer
#       - name: Install PHP and Composer
#         uses: shivammathur/setup-php@v2
#         with:
#           php-version: '8.2' # Ajusta a la versión de PHP usada en tu proyecto Laravel
#           tools: 'composer'

#       # Paso 4: Instalar dependencias PHP
#       - name: Install PHP dependencies
#         run: composer install --optimize-autoloader

#       # Paso 5: Desplegar archivos por FTP
#       - name: FTP-Deploy-Action
#         uses: SamKirkland/FTP-Deploy-Action@4.3.3
#         with:
#           server: ${{ secrets.FTP_SERVER }}
#           username: ${{ secrets.FTP_USERNAME }}
#           password: ${{ secrets.FTP_PASSWORD }}

#       # Paso 6: Configurar el archivo .env desde los secretos
#       - name: Setup environment file
#         run: |
#           echo "Setting up .env from secrets..."
#           echo "${{ secrets.ENV_CONTENT }}" > .env
#           cat .env

#       # Paso 7: Habilitar depuración de Laravel
#       - name: Enable Laravel debug
#         run: |
#           echo "APP_DEBUG=true" >> .env
#           sed -i 's/APP_DEBUG=.*/APP_DEBUG=true/' .env

#       # Paso 8: Configurar permisos de directorios
#       - name: Set directory permissions
#         run: chmod -R 775 storage bootstrap/cache

#       # Paso 9: Esperar a que MySQL esté disponible
#       - name: Wait for MySQL to be ready
#         run: |
#           echo "Waiting for MySQL to be ready..."
#           until mysqladmin ping --host=127.0.0.1 --port=3306 --user=root --password=${{ secrets.DB_PASSWORD }} --silent; do
#             echo "MySQL is not ready, waiting..."
#             sleep 5
#           done

#       # Paso 10: Ejecutar migraciones y semillas en la base de datos
#       - name: Run migrations and seed the database
#         run: |
#           php artisan migrate --force
#           php artisan db:seed --force
#         env:
#           DB_CONNECTION: mysql
#           DB_DATABASE: ${{ secrets.DB_DATABASE }}
#           DB_PORT: 3306
#           DB_HOST: 127.0.0.1
#           DB_USERNAME: root
#           DB_PASSWORD: ${{ secrets.DB_PASSWORD }}

#       # Paso 11: Ejecutar pruebas de PHPUnit
#       - name: Run PHPUnit tests
#         run: vendor/bin/phpunit --testdox
#         env:
#           DB_CONNECTION: mysql
#           DB_DATABASE: ${{ secrets.DB_DATABASE }}
#           DB_PORT: 3306
#           DB_HOST: 127.0.0.1
#           DB_USERNAME: root
#           DB_PASSWORD: ${{ secrets.DB_PASSWORD }}






# name: Publish Website to CPanel
# on:
#   push:
#     branches:
#       - main

# jobs:
#   FTP-Deploy-Action:
#     name: FTP-Deploy-Action
#     runs-on: ubuntu-latest

#     steps:
#     # Paso 1: Clonar el repositorio
#     - name: Checkout repository
#       uses: actions/checkout@v3
#       with:
#         fetch-depth: 2

#     # Paso 2: Instalar dependencias de Node.js y compilar activos
#     - name: Build assets
#       run: npm install && npm run build

#     # Paso 3: Instalar PHP y Composer
#     - name: Install PHP and Composer
#       uses: shivammathur/setup-php@v2
#       with:
#         php-version: '8.2' # Ajusta a la versión de PHP usada en tu proyecto Laravel
#         tools: 'composer'

#     # Paso 4: Instalar dependencias PHP
#     - name: Install PHP dependencies
#       run: composer install --optimize-autoloader

#     # Paso 5: Desplegar archivos por FTP
#     - name: FTP-Deploy-Action
#       uses: SamKirkland/FTP-Deploy-Action@4.3.3
#       with:
#         server: ${{ secrets.FTP_SERVER }}
#         username: ${{ secrets.FTP_USERNAME }}
#         password: ${{ secrets.FTP_PASSWORD }}

#     # Paso 6: Configurar el archivo .env desde los secretos
#     - name: Setup environment file
#       run: |
#         echo "Setting up .env from secrets..."
#         echo "${{ secrets.ENV_CONTENT }}" > .env
#         # Puedes quitar este cat para evitar exponer el contenido del archivo en los logs
#         cat .env

#     - name: Debug .env file
#       run: cat .env

#     # - name: Ensure MySQL is runnings
#     #   run: mysql --host 127.0.0.1 -uunibicuo_xionix -p'#$AIpp/19217553/' unibicuo_xionix -e "SHOW TABLES" --verbose
#       # run: mysql -h localhost -u ${{ secrets.DB_USERNAME }} -p'${{ secrets.DB_PASSWORD }}' ${{ secrets.DB_DATABASE }} -e "SHOW TABLES"
#       # run: mysql -h  -u ${{ secrets.DB_USERNAME }} -p${{ secrets.DB_PASSWORD }} ${{ secrets.DB_DATABASE }} -e "SHOW TABLES"

#     - name: Enable Laravel debugxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
#       run: |
#         echo "APP_DEBUG=true" >> .env
#         sed -i 's/APP_DEBUG=.*/APP_DEBUG=true/' .env

#     # Paso 7: Configurar permisos de directorios
#     - name: Set directory permissions
#       run: chmod -R 775 storage bootstrap/cache
#       # Si es necesario, también puedes configurar la propiedad con chown (opcional)
#       # sudo chown -R www-data:www-data storage bootstrap/cache

#     # Paso 6: Configurar MySQL para pruebas (si necesario)
#     - name: Setup MySQL for testing (optional, can be removed)
#       uses: mirromutth/mysql-action@v1
#       with:
#         mysql-version: '8.0'
#         username: ${{ secrets.DB_USERNAME }} #unibicuo_xionix
#         password: ${{ secrets.DB_PASSWORD }}
#         database: ${{ secrets.DB_DATABASE }}

    # # Paso 8: Ejecutar migraciones y seed en producción
    # - name: Run migrations and seed database
    #   env:
    #     DB_CONNECTION: mysql
    #     DB_HOST: ${{ secrets.DB_HOST }}
    #     DB_PORT: 3306
    #     DB_DATABASE: ${{ secrets.DB_DATABASE }}
    #     DB_USERNAME: ${{ secrets.DB_USERNAME }}
    #     DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
    #   run: |
    #     php artisan migrate --force
    #     php artisan db:seed --force




# name: Publish Website to CPanel
# on:
#   push:
#     branches:
#       - main

# jobs:
#   FTP-Deploy-Action:
#     runs-on: ubuntu-latest

#     steps:
#     - name: Checkout repository
#       uses: actions/checkout@v3

#     - name: Install PHP and Composer
#       uses: shivammathur/setup-php@v2
#       with:
#         php-version: '8.2'
#         tools: composer

#     - name: Install PHP dependencies
#       run: composer install --optimize-autoloader

#     - name: Setup environment file
#       run: echo "${{ secrets.ENV_CONTENT }}" > .env

#     - name: Debug environment variables
#       run: |
#         echo "DB_HOST=${{ secrets.DB_HOST }}"
#         echo "DB_DATABASE=${{ secrets.DB_DATABASE }}"

#     - name: Run migrations and seed database
#       env:
#         DB_CONNECTION: mysql
#         DB_HOST: ${{ secrets.DB_HOST }}
#         DB_PORT: 3306
#         DB_DATABASE: ${{ secrets.DB_DATABASE }}
#         DB_USERNAME: ${{ secrets.DB_USERNAME }}
#         DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
#       run: |
#         php artisan migrate --force
#         php artisan db:seed --force



# name: Publish Website to CPanel
# on:
#   push:
#     branches:
#       - main

# jobs:
#   FTP-Deploy-Action:
#     name: FTP-Deploy-Action
#     runs-on: ubuntu-latest

#     steps:
#     # Paso 1: Clonar el repositorio
#     - name: Checkout repository
#       uses: actions/checkout@v3
#       with:
#         fetch-depth: 2

#     # Paso 2: Instalar dependencias de Node.js y compilar activos
#     - name: Build assets
#       run: npm install && npm run build

#     # Paso 3: Instalar PHP y Composer
#     - name: Install PHP and Composer
#       uses: shivammathur/setup-php@v2
#       with:
#         php-version: '8.2' # Ajusta a la versión de PHP usada en tu proyecto Laravel
#         tools: 'composer'

#     # Paso 4: Instalar dependencias PHP
#     - name: Install PHP dependencies
#       run: composer install --no-dev --optimize-autoloader

#     # Paso 5: Desplegar archivos por FTP
#     - name: FTP-Deploy-Action
#       uses: SamKirkland/FTP-Deploy-Action@4.3.3
#       with:
#         server: ${{ secrets.FTP_SERVER }}
#         username: ${{ secrets.FTP_USERNAME }}
#         password: ${{ secrets.FTP_PASSWORD }}

#     # Paso 6: Configurar el archivo .env desde los secretos
#     - name: Setup environment file
#       run: |
#         echo "Setting up .env from secrets..."
#         echo "${{ secrets.ENV_CONTENT }}" > .env
#         # Puedes quitar este cat para evitar exponer el contenido del archivo en los logs
#         cat .env

#     # Paso 7: Configurar permisos de directorios
#     - name: Set directory permissions
#       run: |
#         chmod -R 775 storage bootstrap/cache
#         # Si es necesario, también puedes configurar la propiedad con chown (opcional)
#         # sudo chown -R www-data:www-data storage bootstrap/cache

    # # Paso 8: Ejecutar migraciones en producción (sin refrescar, solo aplicar migraciones)
    # - name: Run migrations (production)
    #   env:
    #     DB_CONNECTION: mysql
    #     DB_HOST: 127.0.0.1
    #     DB_PORT: 3306
    #     DB_DATABASE: unibicuo_xionix
    #     DB_USERNAME: unibicuo_xionix
    #     DB_PASSWORD: "${{ secrets.DB_PASSWORD }}" # Considera mover la contraseña a un secreto de GitHub
    #   run: php artisan migrate --force
















# name: Laravel CI/CD Pipeline

# on:
#   push:
#     branches:
#       - main

# jobs:
#   build-and-deploy:
#     runs-on: ubuntu-latest

#     steps:
#       # Paso 1: Clonar el repositorio
#       - name: Checkout repository
#         uses: actions/checkout@v2  # Usar una versión estable

#       # Paso 2: Configurar PHP
#       - name: Setup PHP
#         uses: shivammathur/setup-php@v2
#         with:
#           php-version: 8.1
#           extensions: mbstring, bcmath, intl, pdo, mysql
#           ini-values: post_max_size=256M, upload_max_filesize=256M, max_execution_time=300

#       # Paso 3: Instalar dependencias
#       - name: Install dependencies
#         run: composer install --no-dev --prefer-dist --optimize-autoloader

      # Paso 4: Copiar el archivo .env desde los Secrets
      # - name: Setup environment file
      #   run: |
      #     echo "Setting up .env from secrets..."
      #     echo "${{ secrets.ENV_CONTENT }}" > .env
      #     cat .env # Para verificar si se está configurando correctamente el .env

      # # Paso 5: Configurar permisos de directorio
      # - name: Set directory permissions
      #   run: chmod -R 775 storage bootstrap/cache

      # # Paso 6: Configurar MySQL para pruebas (si necesario)
      # - name: Setup MySQL for testing (optional, can be removed)
      #   uses: mirromutth/mysql-action@v1
      #   with:
      #     mysql-version: '8.0'
      #     username: unibicuo_xionix
      #     password: "#$AIpp/19217553/"
      #     database: unibicuo_xionix

      # # Paso 7: Ejecutar migraciones en producción
      # - name: Run migrations (production)
      #   env:
      #     DB_CONNECTION: mysql
      #     DB_HOST: 127.0.0.1
      #     DB_PORT: 3306
      #     DB_DATABASE: unibicuo_xionix
      #     DB_USERNAME: unibicuo_xionix
      #     DB_PASSWORD: "#$AIpp/19217553/"
      #   run: php artisan migrate --force

      # # Paso 8: Ejecutar seeders en producción
      # - name: Run seeders (production)
      #   env:
      #     DB_CONNECTION: mysql
      #     DB_HOST: 127.0.0.1
      #     DB_PORT: 3306
      #     DB_DATABASE: unibicuo_xionix
      #     DB_USERNAME: unibicuo_xionix
      #     DB_PASSWORD: "#$AIpp/19217553/"
      #   run: php artisan db:seed --force

      # Paso 9: Desplegar al servidor mediante FTP
      # - name: Deploy to FTP
      #   uses: SamKirkland/FTP-Deploy-Action@v4.3.4
      #   with:
      #     server: ${{ secrets.FTP_SERVER }}
      #     username: ${{ secrets.FTP_USERNAME }}
      #     password: ${{ secrets.FTP_PASSWORD }}

      # # Paso 10: Ejecutar migraciones en el servidor (Sin SSH, automatización por script)
      # - name: Run database migrations on production (via FTP or script)
      #   run: |
      #     echo "Running migrations manually or via a cron job. Make sure this step is automated on the server if needed."
      #     # Si tienes un script en tu servidor, podrías moverlo por FTP y ejecutarlo después:
      #     # curl http://yourserver.com/path-to-script/migrate.php

      # # Paso 11: Ejecutar seeders en el servidor (Sin SSH, automatización por script)
      # - name: Run seeders on production (via FTP or script)
      #   run: |
      #     echo "Running seeders manually or via a cron job. Make sure this step is automated on the server if needed."
      #     # Puedes correr un script para hacer esto de manera automatizada.

      # # Paso 12: Limpiar cachés en el servidor (Sin SSH)
      # - name: Clear caches (via FTP or script)
      #   run: |
      #     echo "Clearing cache manually or via a cron job on the server."
      #     # También puedes mover un script para ejecutar el cache: php artisan cache:clear




# name: Laravel CI/CD Pipeline

# on:
#   push:
#     branches:
#       - main

# jobs:
#   build-and-deploy:
#     runs-on: ubuntu-latest

#     steps:
#       # Paso 1: Clonar el repositorio
#       - name: Checkout repository
#         uses: actions/checkout@v4

#       # Paso 2: Configurar PHP
#       - name: Setup PHP
#         uses: shivammathur/setup-php@v2
#         with:
#           php-version: 8.1
#           extensions: mbstring, bcmath, intl, pdo, mysql
#           ini-values: post_max_size=256M, upload_max_filesize=256M, max_execution_time=300

#       # Paso 3: Instalar dependencias
#       - name: Install dependencies
#         run: composer install --no-dev --prefer-dist --optimize-autoloader

#       # Paso 4: Copiar el archivo .env desde los Secrets
#       - name: Setup environment file
#         run: |
#           echo "Setting up .env from secrets..."
#           echo "${{ secrets.ENV_CONTENT }}" > .env
#           cat .env # Para verificar si se está configurando correctamente el .env

#       # Paso 5: Configurar permisos de directorio
#       - name: Set directory permissions
#         run: chmod -R 775 storage bootstrap/cache

#       # Paso 6: Configurar MySQL para pruebas locales
#       - name: Setup MySQL for testing
#         uses: mirromutth/mysql-action@v1
#         with:
#           mysql-version: '8.0'
#           username: root
#           password: root
#           database: laravel_test

#       # Paso 7: Ejecutar migraciones en local
#       - name: Run migrations (local)
#         env:
#           DB_CONNECTION: mysql
#           DB_HOST: 127.0.0.1
#           DB_PORT: 3306
#           DB_DATABASE: laravel_test
#           DB_USERNAME: root
#           DB_PASSWORD: root
#         run: php artisan migrate --force

#       # Paso 8: Ejecutar seeders en local
#       - name: Run seeders (local)
#         env:
#           DB_CONNECTION: mysql
#           DB_HOST: 127.0.0.1
#           DB_PORT: 3306
#           DB_DATABASE: laravel_test
#           DB_USERNAME: root
#           DB_PASSWORD: root
#         run: php artisan db:seed --force

#       # Paso 9: Ejecutar pruebas en local
#       - name: Run tests (local)
#         env:
#           DB_CONNECTION: mysql
#           DB_HOST: 127.0.0.1
#           DB_PORT: 3306
#           DB_DATABASE: laravel_test
#           DB_USERNAME: root
#           DB_PASSWORD: root
#         run: php artisan test

#       # Paso 10: Desplegar al servidor mediante FTP
#       - name: Deploy to FTP
#         uses: SamKirkland/FTP-Deploy-Action@v4.3.4
#         with:
#           server: ${{ secrets.FTP_SERVER }}
#           username: ${{ secrets.FTP_USERNAME }}
#           password: ${{ secrets.FTP_PASSWORD }}
#           local-dir: ${{ secrets.LOCAL_DIR }}     # Ruta correcta en el directorio local
#           server-dir: ${{ secrets.SERVER_DIR }}   # Ruta de destino en el servidor FTP

#       # Paso 11: Ejecutar migraciones en el servidor (Sin SSH, automatización por script)
#       - name: Run database migrations on production (via FTP or script)
#         run: |
#           echo "Running migrations manually or via a cron job. Make sure this step is automated on the server if needed."
#           # Si tienes un script en tu servidor, podrías moverlo por FTP y ejecutarlo después:
#           # curl http://yourserver.com/path-to-script/migrate.php

#       # Paso 12: Ejecutar seeders en el servidor (Sin SSH, automatización por script)
#       - name: Run seeders on production (via FTP or script)
#         run: |
#           echo "Running seeders manually or via a cron job. Make sure this step is automated on the server if needed."
#           # Puedes correr un script para hacer esto de manera automatizada.

#       # Paso 13: Limpiar cachés en el servidor (Sin SSH)
#       - name: Clear caches (via FTP or script)
#         run: |
#           echo "Clearing cache manually or via a cron job on the server."
#           # También puedes mover un script para ejecutar el cache: php artisan cache:clear
