name: Publish Website to CPanel
on:
  push:
    branches:
      - main

jobs:
  FTP-Deploy-Action:
    name: FTP-Deploy-Action
    runs-on: ubuntu-latest

    steps:
    # Paso 1: Clonar el repositorio
    - name: Checkout repository
      uses: actions/checkout@v3
      with:
        fetch-depth: 2

    # Paso 2: Instalar dependencias de Node.js y compilar activos
    - name: Build assets
      run: npm install && npm run build

    # Paso 3: Instalar PHP y Composer
    - name: Install PHP and Composer
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.2' # Ajusta a la versión de PHP usada en tu proyecto Laravel
        tools: 'composer'

    # Paso 4: Instalar dependencias PHP
    - name: Install PHP dependencies
      run: composer install --no-dev --optimize-autoloader

    # Paso 5: Desplegar archivos por FTP
    - name: FTP-Deploy-Action
      uses: SamKirkland/FTP-Deploy-Action@4.3.3
      with:
        server: ${{ secrets.FTP_SERVER }}
        username: ${{ secrets.FTP_USERNAME }}
        password: ${{ secrets.FTP_PASSWORD }}

    # Paso 6: Configurar el archivo .env desde los secretos
    - name: Setup environment file
      run: |
        echo "Setting up .env from secrets..."
        echo "${{ secrets.ENV_CONTENT }}" > .env
        # Puedes quitar este cat para evitar exponer el contenido del archivo en los logs
        cat .env

    # Paso 7: Configurar permisos de directorios
    - name: Set directory permissions
      run: chmod -R 775 storage bootstrap/cache
      # Si es necesario, también puedes configurar la propiedad con chown (opcional)
      # sudo chown -R www-data:www-data storage bootstrap/cache

    # Paso 6: Configurar MySQL para pruebas (si necesario)
    - name: Setup MySQL for testing (optional, can be removed)
      uses: mirromutth/mysql-action@v1
      with:
        mysql-version: '8.0'
        username: unibicuo_xionix
        password: "#$AIpp/19217553/"
        database: unibicuo_xionix

    # Paso 8: Ejecutar migraciones en producción (sin refrescar, solo aplicar migraciones)
    - name: Run migrations (production)
      env:
        DB_CONNECTION: mysql
        DB_HOST: 127.0.0.1
        DB_PORT: 3306
        DB_DATABASE: unibicuo_xionix
        DB_USERNAME: unibicuo_xionix
        DB_PASSWORD: "#$AIpp/19217553/" #"${{ secrets.DB_PASSWORD }}" # Considera mover la contraseña a un secreto de GitHub
      run: php artisan migrate --force








# name: Publish Website to CPanel
# on:
#   push:
#     branches:
#       - main

# jobs:
#   FTP-Deploy-Action:
#     name: FTP-Deploy-Action
#     runs-on: ubuntu-latest

#     steps:
#     # Paso 1: Clonar el repositorio
#     - name: Checkout repository
#       uses: actions/checkout@v3
#       with:
#         fetch-depth: 2

#     # Paso 2: Instalar dependencias de Node.js y compilar activos
#     - name: Build assets
#       run: npm install && npm run build

#     # Paso 3: Instalar PHP y Composer
#     - name: Install PHP and Composer
#       uses: shivammathur/setup-php@v2
#       with:
#         php-version: '8.2' # Ajusta a la versión de PHP usada en tu proyecto Laravel
#         tools: 'composer'

#     # Paso 4: Instalar dependencias PHP
#     - name: Install PHP dependencies
#       run: composer install --no-dev --optimize-autoloader

#     # Paso 5: Desplegar archivos por FTP
#     - name: FTP-Deploy-Action
#       uses: SamKirkland/FTP-Deploy-Action@4.3.3
#       with:
#         server: ${{ secrets.FTP_SERVER }}
#         username: ${{ secrets.FTP_USERNAME }}
#         password: ${{ secrets.FTP_PASSWORD }}

#     # Paso 6: Configurar el archivo .env desde los secretos
#     - name: Setup environment file
#       run: |
#         echo "Setting up .env from secrets..."
#         echo "${{ secrets.ENV_CONTENT }}" > .env
#         # Puedes quitar este cat para evitar exponer el contenido del archivo en los logs
#         cat .env

#     # Paso 7: Configurar permisos de directorios
#     - name: Set directory permissions
#       run: |
#         chmod -R 775 storage bootstrap/cache
#         # Si es necesario, también puedes configurar la propiedad con chown (opcional)
#         # sudo chown -R www-data:www-data storage bootstrap/cache

    # # Paso 8: Ejecutar migraciones en producción (sin refrescar, solo aplicar migraciones)
    # - name: Run migrations (production)
    #   env:
    #     DB_CONNECTION: mysql
    #     DB_HOST: 127.0.0.1
    #     DB_PORT: 3306
    #     DB_DATABASE: unibicuo_xionix
    #     DB_USERNAME: unibicuo_xionix
    #     DB_PASSWORD: "${{ secrets.DB_PASSWORD }}" # Considera mover la contraseña a un secreto de GitHub
    #   run: php artisan migrate --force
















# name: Laravel CI/CD Pipeline

# on:
#   push:
#     branches:
#       - main

# jobs:
#   build-and-deploy:
#     runs-on: ubuntu-latest

#     steps:
#       # Paso 1: Clonar el repositorio
#       - name: Checkout repository
#         uses: actions/checkout@v2  # Usar una versión estable

#       # Paso 2: Configurar PHP
#       - name: Setup PHP
#         uses: shivammathur/setup-php@v2
#         with:
#           php-version: 8.1
#           extensions: mbstring, bcmath, intl, pdo, mysql
#           ini-values: post_max_size=256M, upload_max_filesize=256M, max_execution_time=300

#       # Paso 3: Instalar dependencias
#       - name: Install dependencies
#         run: composer install --no-dev --prefer-dist --optimize-autoloader

      # Paso 4: Copiar el archivo .env desde los Secrets
      # - name: Setup environment file
      #   run: |
      #     echo "Setting up .env from secrets..."
      #     echo "${{ secrets.ENV_CONTENT }}" > .env
      #     cat .env # Para verificar si se está configurando correctamente el .env

      # # Paso 5: Configurar permisos de directorio
      # - name: Set directory permissions
      #   run: chmod -R 775 storage bootstrap/cache

      # # Paso 6: Configurar MySQL para pruebas (si necesario)
      # - name: Setup MySQL for testing (optional, can be removed)
      #   uses: mirromutth/mysql-action@v1
      #   with:
      #     mysql-version: '8.0'
      #     username: unibicuo_xionix
      #     password: "#$AIpp/19217553/"
      #     database: unibicuo_xionix

      # # Paso 7: Ejecutar migraciones en producción
      # - name: Run migrations (production)
      #   env:
      #     DB_CONNECTION: mysql
      #     DB_HOST: 127.0.0.1
      #     DB_PORT: 3306
      #     DB_DATABASE: unibicuo_xionix
      #     DB_USERNAME: unibicuo_xionix
      #     DB_PASSWORD: "#$AIpp/19217553/"
      #   run: php artisan migrate --force

      # # Paso 8: Ejecutar seeders en producción
      # - name: Run seeders (production)
      #   env:
      #     DB_CONNECTION: mysql
      #     DB_HOST: 127.0.0.1
      #     DB_PORT: 3306
      #     DB_DATABASE: unibicuo_xionix
      #     DB_USERNAME: unibicuo_xionix
      #     DB_PASSWORD: "#$AIpp/19217553/"
      #   run: php artisan db:seed --force

      # Paso 9: Desplegar al servidor mediante FTP
      # - name: Deploy to FTP
      #   uses: SamKirkland/FTP-Deploy-Action@v4.3.4
      #   with:
      #     server: ${{ secrets.FTP_SERVER }}
      #     username: ${{ secrets.FTP_USERNAME }}
      #     password: ${{ secrets.FTP_PASSWORD }}

      # # Paso 10: Ejecutar migraciones en el servidor (Sin SSH, automatización por script)
      # - name: Run database migrations on production (via FTP or script)
      #   run: |
      #     echo "Running migrations manually or via a cron job. Make sure this step is automated on the server if needed."
      #     # Si tienes un script en tu servidor, podrías moverlo por FTP y ejecutarlo después:
      #     # curl http://yourserver.com/path-to-script/migrate.php

      # # Paso 11: Ejecutar seeders en el servidor (Sin SSH, automatización por script)
      # - name: Run seeders on production (via FTP or script)
      #   run: |
      #     echo "Running seeders manually or via a cron job. Make sure this step is automated on the server if needed."
      #     # Puedes correr un script para hacer esto de manera automatizada.

      # # Paso 12: Limpiar cachés en el servidor (Sin SSH)
      # - name: Clear caches (via FTP or script)
      #   run: |
      #     echo "Clearing cache manually or via a cron job on the server."
      #     # También puedes mover un script para ejecutar el cache: php artisan cache:clear




# name: Laravel CI/CD Pipeline

# on:
#   push:
#     branches:
#       - main

# jobs:
#   build-and-deploy:
#     runs-on: ubuntu-latest

#     steps:
#       # Paso 1: Clonar el repositorio
#       - name: Checkout repository
#         uses: actions/checkout@v4

#       # Paso 2: Configurar PHP
#       - name: Setup PHP
#         uses: shivammathur/setup-php@v2
#         with:
#           php-version: 8.1
#           extensions: mbstring, bcmath, intl, pdo, mysql
#           ini-values: post_max_size=256M, upload_max_filesize=256M, max_execution_time=300

#       # Paso 3: Instalar dependencias
#       - name: Install dependencies
#         run: composer install --no-dev --prefer-dist --optimize-autoloader

#       # Paso 4: Copiar el archivo .env desde los Secrets
#       - name: Setup environment file
#         run: |
#           echo "Setting up .env from secrets..."
#           echo "${{ secrets.ENV_CONTENT }}" > .env
#           cat .env # Para verificar si se está configurando correctamente el .env

#       # Paso 5: Configurar permisos de directorio
#       - name: Set directory permissions
#         run: chmod -R 775 storage bootstrap/cache

#       # Paso 6: Configurar MySQL para pruebas locales
#       - name: Setup MySQL for testing
#         uses: mirromutth/mysql-action@v1
#         with:
#           mysql-version: '8.0'
#           username: root
#           password: root
#           database: laravel_test

#       # Paso 7: Ejecutar migraciones en local
#       - name: Run migrations (local)
#         env:
#           DB_CONNECTION: mysql
#           DB_HOST: 127.0.0.1
#           DB_PORT: 3306
#           DB_DATABASE: laravel_test
#           DB_USERNAME: root
#           DB_PASSWORD: root
#         run: php artisan migrate --force

#       # Paso 8: Ejecutar seeders en local
#       - name: Run seeders (local)
#         env:
#           DB_CONNECTION: mysql
#           DB_HOST: 127.0.0.1
#           DB_PORT: 3306
#           DB_DATABASE: laravel_test
#           DB_USERNAME: root
#           DB_PASSWORD: root
#         run: php artisan db:seed --force

#       # Paso 9: Ejecutar pruebas en local
#       - name: Run tests (local)
#         env:
#           DB_CONNECTION: mysql
#           DB_HOST: 127.0.0.1
#           DB_PORT: 3306
#           DB_DATABASE: laravel_test
#           DB_USERNAME: root
#           DB_PASSWORD: root
#         run: php artisan test

#       # Paso 10: Desplegar al servidor mediante FTP
#       - name: Deploy to FTP
#         uses: SamKirkland/FTP-Deploy-Action@v4.3.4
#         with:
#           server: ${{ secrets.FTP_SERVER }}
#           username: ${{ secrets.FTP_USERNAME }}
#           password: ${{ secrets.FTP_PASSWORD }}
#           local-dir: ${{ secrets.LOCAL_DIR }}     # Ruta correcta en el directorio local
#           server-dir: ${{ secrets.SERVER_DIR }}   # Ruta de destino en el servidor FTP

#       # Paso 11: Ejecutar migraciones en el servidor (Sin SSH, automatización por script)
#       - name: Run database migrations on production (via FTP or script)
#         run: |
#           echo "Running migrations manually or via a cron job. Make sure this step is automated on the server if needed."
#           # Si tienes un script en tu servidor, podrías moverlo por FTP y ejecutarlo después:
#           # curl http://yourserver.com/path-to-script/migrate.php

#       # Paso 12: Ejecutar seeders en el servidor (Sin SSH, automatización por script)
#       - name: Run seeders on production (via FTP or script)
#         run: |
#           echo "Running seeders manually or via a cron job. Make sure this step is automated on the server if needed."
#           # Puedes correr un script para hacer esto de manera automatizada.

#       # Paso 13: Limpiar cachés en el servidor (Sin SSH)
#       - name: Clear caches (via FTP or script)
#         run: |
#           echo "Clearing cache manually or via a cron job on the server."
#           # También puedes mover un script para ejecutar el cache: php artisan cache:clear
